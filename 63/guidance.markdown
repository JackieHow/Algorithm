在这个解释中，我将使用文本来描述一个 3x3 的网格，其中包含障碍物，并展示如何使用动态规划计算网格中的路径数量。假设障碍物位于 `(1,1)` 位置。

### 网格布局与初始化
```
+---+---+---+
| 1 | 1 | 1 |
+---+---+---+
| 1 | X | ? |
+---+---+---+
| 1 | ? | ? |
+---+---+---+
```
- `1` 表示从起点到该位置有一条路径。
- `X` 表示障碍物，路径为 0。
- `?` 表示需要计算的值。

### 步骤说明
1. **初始化起点**：`(0,0)` 的路径数量为 `1`，因为只有从自身出发。
2. **填充第一行和第一列**：
   - 第一行和第一列每个位置都只能从它的左侧或上方直接到达，所以没有障碍物时，这些位置的路径数量也是 `1`。
   - 第一行 `(0,1)` 和 `(0,2)` 都是 `1`，因为只能水平从左向右走。
   - 第一列 `(1,0)` 和 `(2,0)` 都是 `1`，因为只能垂直从上向下走。
3. **处理障碍物**：
   - `(1,1)` 是障碍物，所以路径数量是 `0`。
4. **计算其它单元格**：
   - 对于 `(1,2)`，其左方 `(1,1)` 是障碍物，路径数为 `0`；左边 `(0,2)` 是 `1`。因此，`(1,2)` 的路径数是 `0 + 1 = 1`。
   - 对于 `(2,1)`，其上方 `(1,1)` 是障碍物，路径数为 `0`；左边 `(2,0)` 是 `1`。因此，`(2,1)` 的路径数是 `0 + 1 = 1`。
   - 对于 `(2,2)`，其上方 `(2,1)` 是 `1`；左边 `(1,2)` 是 `1`。因此，`(2,2)` 的路径数是 `1 + 1 = 2`。

### 最终网格状态
```
+---+---+---+
| 1 | 1 | 1 |
+---+---+---+
| 1 | 0 | 1 |
+---+---+---+
| 1 | 1 | 2 |
+---+---+---+
```
- 每个单元格显示从起点到该位置的路径数量。
- 障碍物位置的路径数为 `0`，表明没有路径能通过障碍物。

通过这种方式，动态规划表确保了一旦某个单元格是障碍物，从该单元格出发的所有可能的路径（向下和向右）都被阻断。这直接反映在障碍物后面的单元格路径数上，由障碍物影响的单元格只能通过其它方向（没有阻碍的方向）来累积路径数。这样的初始化和迭代计算有效地表现了如何处理和反映障碍物的影响。